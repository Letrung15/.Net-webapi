// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VuongLeTrung.Exercise02.Context;

#nullable disable

namespace Exercise02.Migrations
{
    [DbContext(typeof(Exercise02Context))]
    [Migration("20240402101801_CreateEXcerise")]
    partial class CreateEXcerise
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("attribute_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("932b3b04-0e9c-43a0-87e0-806cfdb69daf"),
                            AttributeName = "Color",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2738)
                        },
                        new
                        {
                            Id = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            AttributeName = "Size",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2741)
                        });
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.AttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attribute_id");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("attribute_value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("attribute_values");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88c68238-db34-40fb-873e-af6671b3abfb"),
                            AttributeId = new Guid("932b3b04-0e9c-43a0-87e0-806cfdb69daf"),
                            Color = "#000",
                            Value = "black"
                        },
                        new
                        {
                            Id = new Guid("bbd1db1b-fcb7-4c07-8e05-1ba2b67bb15a"),
                            AttributeId = new Guid("932b3b04-0e9c-43a0-87e0-806cfdb69daf"),
                            Color = "#FFF",
                            Value = "white"
                        },
                        new
                        {
                            Id = new Guid("9484c9af-7b8c-4648-87d4-24f856062e67"),
                            AttributeId = new Guid("932b3b04-0e9c-43a0-87e0-806cfdb69daf"),
                            Color = "#FF0000",
                            Value = "red"
                        },
                        new
                        {
                            Id = new Guid("ecddcf82-61c4-4b12-a420-bee28521296f"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "S"
                        },
                        new
                        {
                            Id = new Guid("da116964-a42e-4c63-b844-8a99a864c26f"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "M"
                        },
                        new
                        {
                            Id = new Guid("2f91dee3-b5b9-4886-bae9-e226cd60b507"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "L"
                        },
                        new
                        {
                            Id = new Guid("9ab5e159-711e-4512-8086-c84925568c21"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "XL"
                        },
                        new
                        {
                            Id = new Guid("0ff126d2-fb4b-47e0-b973-1989796c308c"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "2XL"
                        },
                        new
                        {
                            Id = new Guid("656c79a4-8cdb-43a9-921b-cc248580a793"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "3XL"
                        },
                        new
                        {
                            Id = new Guid("18950f2f-7e58-4096-b210-c8b7649907b9"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "4XL"
                        },
                        new
                        {
                            Id = new Guid("e2729eff-4ead-4be8-9107-007d56f9664e"),
                            AttributeId = new Guid("7f2bb139-fba4-42ab-9cbc-16028b9136da"),
                            Value = "5XL"
                        });
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.CardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("card_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ProductId");

                    b.ToTable("card_items");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_description");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<int?>("Placeholder")
                        .HasColumnType("int")
                        .HasColumnName("placeholder");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("iso");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("iso3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("name");

                    b.Property<short?>("NumCode")
                        .HasColumnType("smallint")
                        .HasColumnName("num_code");

                    b.Property<int>("PhoneCode")
                        .HasColumnType("int")
                        .HasColumnName("phone_code");

                    b.Property<string>("UpperName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("upper_name");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset?>("CouponEndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("coupon_end_date");

                    b.Property<DateTimeOffset?>("CouponStartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("coupon_start_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("discount_type");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_value");

                    b.Property<decimal?>("MaxUsage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_usage");

                    b.Property<decimal?>("OrderAmountLimit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("order_amount_limit");

                    b.Property<decimal>("TimesUsed")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("times_used");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<DateTimeOffset>("RegisteredAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("registered_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("country");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<string>("DialCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("dial_code");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_addresses");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsThumbnail")
                        .HasColumnType("bit")
                        .HasColumnName("is_thumbnail");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("placeholder");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("galleries");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("NotificationExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("notification_expiry_date");

                    b.Property<DateTimeOffset?>("ReceiveTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("receive_time");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit")
                        .HasColumnName("seen");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("id");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("coupon_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset?>("OrderApprovedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("order_approved_at");

                    b.Property<DateTimeOffset?>("OrderDeliveredCarrierDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("order_delivered_carrier_date");

                    b.Property<DateTimeOffset?>("OrderDeliveredCustomerDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("order_delivered_customer_date");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("order_status_id");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("privacy");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("order_statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("286b2862-fdd0-4638-be05-5b9f794f56e1"),
                            Color = "#5ae510",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2348),
                            Privacy = "public",
                            StatusName = "Delivered"
                        },
                        new
                        {
                            Id = new Guid("afc44c0a-b979-4c9c-83d5-8d83327c4f1e"),
                            Color = "#ff03d3",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2390),
                            Privacy = "public",
                            StatusName = "Unreached"
                        },
                        new
                        {
                            Id = new Guid("67e6f407-8536-43da-9072-40dd8314a86a"),
                            Color = "#4caf50",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2393),
                            Privacy = "public",
                            StatusName = "Paid"
                        },
                        new
                        {
                            Id = new Guid("b0754809-6238-4ad5-98a3-a4a8a18fbfe5"),
                            Color = "#00d4cb",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2395),
                            Privacy = "public",
                            StatusName = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("2547d9fc-8dd0-439b-8ab0-93749adc31e9"),
                            Color = "#ab5ae9",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2397),
                            Privacy = "public",
                            StatusName = "Processing"
                        },
                        new
                        {
                            Id = new Guid("800a69e8-1f80-4774-8a5f-e37d43f7262c"),
                            Color = "#ffe224",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2398),
                            Privacy = "public",
                            StatusName = "Pending"
                        },
                        new
                        {
                            Id = new Guid("79746bfd-9ed9-4cef-92bc-8e9ace420191"),
                            Color = "#d6d6d6",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2415),
                            Privacy = "public",
                            StatusName = "On Hold"
                        },
                        new
                        {
                            Id = new Guid("c0ccc656-3b76-4f62-bef7-3b23e712be98"),
                            Color = "#71f9f7",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2417),
                            Privacy = "public",
                            StatusName = "Shipped"
                        },
                        new
                        {
                            Id = new Guid("143876b5-017c-4aad-bd30-cdfefd6f8dd2"),
                            Color = "#FD9F3D",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2418),
                            Privacy = "public",
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            Id = new Guid("8c5138d9-3359-458a-bd77-fcddf663f127"),
                            Color = "#FF532F",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2429),
                            Privacy = "private",
                            StatusName = "Refused"
                        },
                        new
                        {
                            Id = new Guid("fb0bf273-708a-4b89-a002-cf8c96f98969"),
                            Color = "#000",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2431),
                            Privacy = "private",
                            StatusName = "Awaiting Return"
                        },
                        new
                        {
                            Id = new Guid("aba3e26e-6600-4ae6-8546-152e56f5de32"),
                            Color = "#000",
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2432),
                            Privacy = "private",
                            StatusName = "Returned"
                        });
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("BuyingPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("buying_price");

                    b.Property<decimal?>("ComparePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("compare_price");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<bool?>("DisableOutOfStock")
                        .HasColumnType("bit")
                        .HasColumnName("disable_out_of_stock");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("product_type");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit")
                        .HasColumnName("published");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SKU")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sale_price");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(165)
                        .HasColumnType("nvarchar(165)")
                        .HasColumnName("short_description");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("products");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attribute_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_attributes");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AttributeValueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attribute_value_id");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_attribute_id");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("product_attribute_values");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductCoupon", b =>
                {
                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("coupon_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.HasKey("CouponId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_coupons");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductShipping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<decimal>("estimatedDays")
                        .HasColumnType("numeric")
                        .HasColumnName("estimated_days");

                    b.Property<bool>("free")
                        .HasColumnType("bit");

                    b.Property<decimal>("shippingCharge")
                        .HasColumnType("numeric")
                        .HasColumnName("shipping_charge");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_shippings_info");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductSupplier", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supplier_id");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product_supplier");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("product_tags");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Privileges")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("privileges");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Privileges = "[\"super_admin_privilege\", \"admin_read_privilege\", \"admin_create_privilege\", \"admin_update_privilege\", \"admin_delete_privilege\", \"staff_read_privilege\", \"staff_create_privilege\", \"staff_update_privilege\", \"staff_delete_privilege\"]",
                            RoleName = "Store Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Privileges = "[\"admin_read_privilege\", \"admin_create_privilege\", \"admin_update_privilege\", \"admin_delete_privilege\", \"staff_read_privilege\", \"staff_create_privilege\", \"staff_update_privilege\", \"staff_delete_privilege\"]",
                            RoleName = "Sales Manager"
                        },
                        new
                        {
                            Id = 3,
                            Privileges = "[\"staff_read_privilege\", \"staff_create_privilege\", \"staff_update_privilege\", \"staff_delete_privilege\"]",
                            RoleName = "Sales Staff"
                        },
                        new
                        {
                            Id = 4,
                            Privileges = "[\"staff_read_privilege\"]",
                            RoleName = "Guest"
                        },
                        new
                        {
                            Id = 5,
                            Privileges = "[\"admin_read_privilege\", \"staff_read_privilege\"]",
                            RoleName = "Investor"
                        });
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Sell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("sells");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_value");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("min_value");

                    b.Property<bool>("NoMax")
                        .HasColumnType("bit")
                        .HasColumnName("no_max");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("ShippingZoneId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_zone_id");

                    b.Property<string>("WeightUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("weight_unit");

                    b.HasKey("Id");

                    b.HasIndex("ShippingZoneId");

                    b.ToTable("shipping_rates");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("display_name");

                    b.Property<bool>("FreeShipping")
                        .HasColumnType("bit")
                        .HasColumnName("free_shipping");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("info");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("rate_type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("shipping_zones");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingZoneCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<int>("ShippingZoneId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_zone_id");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ShippingZoneId");

                    b.ToTable("shipping_country_zones");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Slideshow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.Property<string>("descriptionUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description_url");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("slideshows");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.StaffAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("placeholder");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("staff_accounts");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("company");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("supplier_name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tag_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bae3e661-906e-4a69-b767-76ddb17a924b"),
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2671),
                            Icon = "Tools",
                            TagName = "Tools"
                        },
                        new
                        {
                            Id = new Guid("af47253b-17b5-4aec-bfa7-f9c1e5bdacb1"),
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2675),
                            Icon = "BeautyHealth",
                            TagName = "Beauty Health"
                        },
                        new
                        {
                            Id = new Guid("2cb8408a-7222-4dad-a565-71cf1177cc38"),
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2680),
                            Icon = "Shirts",
                            TagName = "Shirts"
                        },
                        new
                        {
                            Id = new Guid("b0f5a65e-a8d1-4773-94fd-7c935c953eae"),
                            CreatedAt = new DateTime(2024, 4, 2, 10, 18, 0, 788, DateTimeKind.Utc).AddTicks(2682),
                            Icon = "Accessories",
                            TagName = "Accessories"
                        });
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<Guid>("VariantAttributeValueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("variant_attribute_value_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("variants");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.VariantOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active");

                    b.Property<decimal?>("BuyingPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("buying_price");

                    b.Property<decimal>("ComparePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("compare_price");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("image_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sale_price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("variant_options");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Attribute", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.AttributeValue", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Attribute", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Card", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.CardItem", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("CardItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Card");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Category", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentCategory");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Coupon", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.CustomerAddress", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Gallery", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("Galleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Notification", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Order", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Coupon");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.OrderItem", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.OrderStatus", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Product", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductAttribute", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.AttributeValue", "AttributeValue")
                        .WithMany()
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductCategory", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductCoupon", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Coupon", "Coupon")
                        .WithMany("ProductCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductCoupons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductShipping", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductShippings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductSupplier", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ProductTag", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Sell", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingRate", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.ShippingZone", "ShippingZone")
                        .WithMany()
                        .HasForeignKey("ShippingZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingZone");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingZone", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingZoneCountry", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Country", "Country")
                        .WithMany("ShippingZoneCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.ShippingZone", "ShippingZone")
                        .WithMany("ShippingZoneCountries")
                        .HasForeignKey("ShippingZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ShippingZone");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Slideshow", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.StaffAccount", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Supplier", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Tag", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("VuongLeTrung.Exercise02.Models.StaffAccount", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Variant", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.VariantOption", b =>
                {
                    b.HasOne("VuongLeTrung.Exercise02.Models.Gallery", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("VuongLeTrung.Exercise02.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Attribute", b =>
                {
                    b.Navigation("AttributeValues");

                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Country", b =>
                {
                    b.Navigation("ShippingZoneCountries");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Coupon", b =>
                {
                    b.Navigation("ProductCoupons");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Product", b =>
                {
                    b.Navigation("CardItems");

                    b.Navigation("Galleries");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductCoupons");

                    b.Navigation("ProductShippings");

                    b.Navigation("ProductSuppliers");

                    b.Navigation("ProductTags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.ShippingZone", b =>
                {
                    b.Navigation("ShippingZoneCountries");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("VuongLeTrung.Exercise02.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
